"use strict"; /**
               * @file
               * config file to handle the consul service.
               */

//var consul = require('consul')()
var Bluebird = require('bluebird');
var PORT = Number(process.env.PORT) || 8889;
var IP_ADDRESS = process.env.IP_ADDRESS || 'localhost';
var CONSUL_ID = require('uuid').v4();
var CN_HOST = "172.18.36.244";

/**
                                    * @name fromCallback
                                    * @desc to update the order based on id.
                                    * @input DB element,orderid and fields
                                    * @output order obj / err obj
                                    */
function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback, host: CN_HOST });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});


// ----- should be part of search/order services

var details = {
  name: 'restaurant', // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };



consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvY29uZmlnL2NvbnN1bC5qcyJdLCJuYW1lcyI6WyJCbHVlYmlyZCIsInJlcXVpcmUiLCJQT1JUIiwiTnVtYmVyIiwicHJvY2VzcyIsImVudiIsIklQX0FERFJFU1MiLCJDT05TVUxfSUQiLCJ2NCIsIkNOX0hPU1QiLCJmcm9tQ2FsbGJhY2siLCJmbiIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwicmVzIiwiY29uc3VsIiwicHJvbWlzaWZ5IiwiaG9zdCIsImFjbCIsImJvb3RzdHJhcCIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJhZ2VudCIsIm1lbWJlcnMiLCJkZXRhaWxzIiwibmFtZSIsImFkZHJlc3MiLCJwb3J0IiwiaWQiLCJjaGVjayIsInR0bCIsImRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlciIsInNlcnZpY2UiLCJyZWdpc3RlciIsInNldEludGVydmFsIiwicGFzcyIsIkVycm9yIiwib24iLCJkZXJlZ2lzdGVyIiwiZXhpdCJdLCJtYXBwaW5ncyI6ImNBQUE7Ozs7O0FBS0E7QUFDQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCO0FBQ0EsSUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxJQUFiLENBQU4sSUFBNEIsSUFBekM7QUFDQSxJQUFNSSxVQUFVLEdBQUdGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxVQUFaLElBQTBCLFdBQTdDO0FBQ0EsSUFBTUMsU0FBUyxHQUFHTixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCTyxFQUFoQixFQUFsQjtBQUNBLElBQU1DLE9BQU8sR0FBRyxlQUFoQjs7QUFFQTs7Ozs7O0FBTUEsU0FBU0MsWUFBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFDeEIsU0FBTyxJQUFJWCxRQUFKLENBQWEsVUFBVVksT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDN0MsUUFBSTtBQUNGLGFBQU9GLEVBQUUsQ0FBQyxVQUFVRyxHQUFWLEVBQWVDLElBQWYsRUFBcUJDLEdBQXJCLEVBQTBCO0FBQ2xDLFlBQUlGLEdBQUosRUFBUztBQUNQQSxVQUFBQSxHQUFHLENBQUNFLEdBQUosR0FBVUEsR0FBVjtBQUNBLGlCQUFPSCxNQUFNLENBQUNDLEdBQUQsQ0FBYjtBQUNEO0FBQ0QsZUFBT0YsT0FBTyxDQUFDLENBQUNHLElBQUQsRUFBT0MsR0FBUCxDQUFELENBQWQ7QUFDRCxPQU5RLENBQVQ7QUFPRCxLQVJELENBUUUsT0FBT0YsR0FBUCxFQUFZO0FBQ1osYUFBT0QsTUFBTSxDQUFDQyxHQUFELENBQWI7QUFDRDtBQUNGLEdBWk0sQ0FBUDtBQWFEO0FBQ0QsSUFBSUcsTUFBTSxHQUFHaEIsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQixFQUFFaUIsU0FBUyxFQUFFUixZQUFiLEVBQTJCUyxJQUFJLEVBQUVWLE9BQWpDLEVBQWxCLENBQWI7OztBQUdBUSxNQUFNLENBQUNHLEdBQVAsQ0FBV0MsU0FBWCxDQUFxQixVQUFVUCxHQUFWLEVBQWVRLE1BQWYsRUFBdUI7QUFDMUNDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVixHQUFaLEVBQWlCUSxNQUFqQjtBQUNBO0FBQ0QsQ0FIRDs7O0FBTUFMLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhQyxPQUFiLENBQXFCLFVBQVVaLEdBQVYsRUFBZVEsTUFBZixFQUF1QjtBQUMxQ0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWixFQUF1QlYsR0FBdkIsRUFBNEJRLE1BQTVCO0FBQ0EsTUFBSVIsR0FBSixFQUFTLE1BQU1BLEdBQU47QUFDVixDQUhEOzs7QUFNQTs7QUFFQSxJQUFJYSxPQUFPLEdBQUc7QUFDWkMsRUFBQUEsSUFBSSxFQUFFLFlBRE0sRUFDUTtBQUNwQkMsRUFBQUEsT0FBTyxFQUFFdkIsVUFGRztBQUdad0IsRUFBQUEsSUFBSSxFQUFFNUIsSUFITTtBQUlaNkIsRUFBQUEsRUFBRSxFQUFFeEIsU0FKUTtBQUtaeUIsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLEdBQUcsRUFBRSxLQURBO0FBRUxDLElBQUFBLGlDQUFpQyxFQUFFLElBRjlCLEVBTEssRUFBZDs7OztBQVdBakIsTUFBTSxDQUFDUSxLQUFQLENBQWFVLE9BQWIsQ0FBcUJDLFFBQXJCLENBQThCVCxPQUE5QixFQUF1QyxVQUFBYixHQUFHLEVBQUk7QUFDNUM7QUFDQVMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWixFQUF5QlYsR0FBekI7QUFDRCxDQUhEOztBQUtBdUIsV0FBVyxDQUFDLFlBQU07QUFDaEJwQixFQUFBQSxNQUFNLENBQUNRLEtBQVAsQ0FBYU8sS0FBYixDQUFtQk0sSUFBbkIsQ0FBd0IsRUFBRVAsRUFBRSxvQkFBYXhCLFNBQWIsQ0FBSixFQUF4QixFQUF3RCxVQUFBTyxHQUFHLEVBQUk7QUFDN0QsUUFBSUEsR0FBSixFQUFTLE1BQU0sSUFBSXlCLEtBQUosQ0FBVXpCLEdBQVYsQ0FBTjtBQUNUUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxpQ0FBWjtBQUNELEdBSEQ7QUFJRCxDQUxVLEVBS1IsSUFBSSxJQUxJLENBQVg7O0FBT0FwQixPQUFPLENBQUNvQyxFQUFSLENBQVcsUUFBWCxFQUFxQixZQUFNO0FBQ3pCakIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksMkJBQVo7QUFDQSxNQUFJRyxPQUFPLEdBQUcsRUFBRUksRUFBRSxFQUFFeEIsU0FBTixFQUFkOztBQUVBVSxFQUFBQSxNQUFNLENBQUNRLEtBQVAsQ0FBYVUsT0FBYixDQUFxQk0sVUFBckIsQ0FBZ0NkLE9BQWhDLEVBQXlDLFVBQUNiLEdBQUQsRUFBUztBQUNoRFMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVosRUFBOEJWLEdBQTlCO0FBQ0FWLElBQUFBLE9BQU8sQ0FBQ3NDLElBQVI7QUFDRCxHQUhEO0FBSUQsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAZmlsZVxyXG4gKiBjb25maWcgZmlsZSB0byBoYW5kbGUgdGhlIGNvbnN1bCBzZXJ2aWNlLlxyXG4gKi9cclxuXHJcbi8vdmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKClcclxuY29uc3QgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpXHJcbmNvbnN0IFBPUlQgPSBOdW1iZXIocHJvY2Vzcy5lbnYuUE9SVCkgfHwgODg4OVxyXG5jb25zdCBJUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuSVBfQUREUkVTUyB8fCAnbG9jYWxob3N0J1xyXG5jb25zdCBDT05TVUxfSUQgPSByZXF1aXJlKCd1dWlkJykudjQoKVxyXG5jb25zdCBDTl9IT1NUID0gXCIxNzIuMTguMzYuMjQ0XCI7XHJcblxyXG4vKipcclxuICAgICAqIEBuYW1lIGZyb21DYWxsYmFja1xyXG4gICAgICogQGRlc2MgdG8gdXBkYXRlIHRoZSBvcmRlciBiYXNlZCBvbiBpZC5cclxuICAgICAqIEBpbnB1dCBEQiBlbGVtZW50LG9yZGVyaWQgYW5kIGZpZWxkc1xyXG4gICAgICogQG91dHB1dCBvcmRlciBvYmogLyBlcnIgb2JqXHJcbiAgICAgKi9cclxuZnVuY3Rpb24gZnJvbUNhbGxiYWNrKGZuKSB7XHJcbiAgcmV0dXJuIG5ldyBCbHVlYmlyZChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gZm4oZnVuY3Rpb24gKGVyciwgZGF0YSwgcmVzKSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgZXJyLnJlcyA9IHJlc1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlKFtkYXRhLCByZXNdKVxyXG4gICAgICB9KVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiByZWplY3QoZXJyKVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxudmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKHsgcHJvbWlzaWZ5OiBmcm9tQ2FsbGJhY2ssIGhvc3Q6IENOX0hPU1QgfSlcclxuXHJcblxyXG5jb25zdWwuYWNsLmJvb3RzdHJhcChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICBjb25zb2xlLmxvZyhlcnIsIHJlc3VsdClcclxuICAvLyBpZiAoZXJyKSB0aHJvdyBlcnJcclxufSlcclxuXHJcblxyXG5jb25zdWwuYWdlbnQubWVtYmVycyhmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICBjb25zb2xlLmxvZygnbWVtZWJycycsIGVyciwgcmVzdWx0KVxyXG4gIGlmIChlcnIpIHRocm93IGVyclxyXG59KVxyXG5cclxuXHJcbi8vIC0tLS0tIHNob3VsZCBiZSBwYXJ0IG9mIHNlYXJjaC9vcmRlciBzZXJ2aWNlc1xyXG5cclxubGV0IGRldGFpbHMgPSB7XHJcbiAgbmFtZTogJ3Jlc3RhdXJhbnQnLCAvLyBzZXJ2aWNlIGdyb3VwIG5hbWUgc2VhcmNoIG9yIG9yZGVyXHJcbiAgYWRkcmVzczogSVBfQUREUkVTUyxcclxuICBwb3J0OiBQT1JULFxyXG4gIGlkOiBDT05TVUxfSUQsXHJcbiAgY2hlY2s6IHtcclxuICAgIHR0bDogJzEwcycsXHJcbiAgICBkZXJlZ2lzdGVyX2NyaXRpY2FsX3NlcnZpY2VfYWZ0ZXI6ICcxbSdcclxuICB9XHJcbn1cclxuXHJcbmNvbnN1bC5hZ2VudC5zZXJ2aWNlLnJlZ2lzdGVyKGRldGFpbHMsIGVyciA9PiB7XHJcbiAgLy8gc2NoZWR1bGUgaGVhcnRiZWF0XHJcbiAgY29uc29sZS5sb2coXCJyZWdpc3RlciBcIiwgZXJyKVxyXG59KVxyXG5cclxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gIGNvbnN1bC5hZ2VudC5jaGVjay5wYXNzKHsgaWQ6IGBzZXJ2aWNlOiR7Q09OU1VMX0lEfWAgfSwgZXJyID0+IHtcclxuICAgIGlmIChlcnIpIHRocm93IG5ldyBFcnJvcihlcnIpXHJcbiAgICBjb25zb2xlLmxvZygndG9sZCBDb25zdWwgdGhhdCB3ZSBhcmUgaGVhbHRoeScpXHJcbiAgfSlcclxufSwgNSAqIDEwMDApXHJcblxyXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ1NJR0lOVC4gRGUtUmVnaXN0ZXJpbmcuLi4nKVxyXG4gIGxldCBkZXRhaWxzID0geyBpZDogQ09OU1VMX0lEIH1cclxuXHJcbiAgY29uc3VsLmFnZW50LnNlcnZpY2UuZGVyZWdpc3RlcihkZXRhaWxzLCAoZXJyKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnZGUtcmVnaXN0ZXJlZC4nLCBlcnIpXHJcbiAgICBwcm9jZXNzLmV4aXQoKVxyXG4gIH0pXHJcbn0pXHJcbiJdfQ==