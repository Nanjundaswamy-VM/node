'use strict';var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var
Query_handler = /*#__PURE__*/function () {function Query_handler() {(0, _classCallCheck2["default"])(this, Query_handler);}(0, _createClass2["default"])(Query_handler, [{ key: "save_entry", value: function save_entry(

    element) {
      return new Promise(function (resolve, reject) {
        // save the order
        element.save(function (err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    } }, { key: "get_entry_by_id", value: function get_entry_by_id(

    element, id) {
      return new Promise(function (resolve, reject) {
        // get the entry
        element.findById(id, function (err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    } }, { key: "get_ids_by_city", value: function get_ids_by_city(

    element, value, fields) {
      return new Promise(function (resolve, reject) {
        // get the entry with specified fields
        element.find({ city: new RegExp('^' + value + '$', 'i') }, fields, function (err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    } }, { key: "update_entry", value: function update_entry(
    element, id, fields) {
      return new Promise(function (resolve, reject) {
        // update the entry
        element.updateOne({ '_id': Object(id) }, fields, function (err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    } }, { key: "find_entry", value: function find_entry(

    element, req_data) {
      return new Promise(function (resolve, reject) {
        var queryObj = {};
        if (req_data.cuisine) {
          queryObj.cuisines = { $eq: req_data.cuisine };
        }

        if (req_data.name) {
          queryObj.name = { $eq: req_data.name };
        }
        if (req_data.ratings) {
          queryObj.ratings = { $gte: req_data.ratings };
        }

        if (req_data.budget) {
          queryObj.budget = { $lte: req_data.budget };
        }

        if (req_data.location) {
          queryObj.city = { $eq: req_data.location };
        }
        if (req_data.menu) {
          queryObj.menu = { $elemMatch: { itemname: req_data.menu } };
        }
        if (req_data.distance) {
          var _long = req_data.distance[0];
          var latt = req_data.distance[1];
          queryObj.location = {
            $near: {
              $maxDistance: 10000,
              $geometry: {
                type: "Point",
                coordinates: [_long, latt] } } };



        }
        console.log(queryObj);
        element.find({ $and: [queryObj] }, function (err, docs) {
          if (err) {
            reject(err);
          } else {
            console.log(docs);
            resolve(docs);
          }
        });

      });
    } }]);return Query_handler;}();


var query_obj = new Query_handler();
module.exports = query_obj;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,