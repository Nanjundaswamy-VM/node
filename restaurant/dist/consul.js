"use strict";var PORT = Number(process.env.PORT) || 8889;
var IP_ADDRESS = process.env.IP_ADDRESS || 'localhost';
var CONSUL_ID = require('uuid').v4();
// var consul = require('consul')();
var Bluebird = require('bluebird');

function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback, host: "172.18.40.168" });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err;
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});
// ----- should be part of search/order services

var details = {
  name: 'restaurant', // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };


consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});

// -----------------
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdWwuanMiXSwibmFtZXMiOlsiUE9SVCIsIk51bWJlciIsInByb2Nlc3MiLCJlbnYiLCJJUF9BRERSRVNTIiwiQ09OU1VMX0lEIiwicmVxdWlyZSIsInY0IiwiQmx1ZWJpcmQiLCJmcm9tQ2FsbGJhY2siLCJmbiIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwicmVzIiwiY29uc3VsIiwicHJvbWlzaWZ5IiwiaG9zdCIsImFjbCIsImJvb3RzdHJhcCIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJhZ2VudCIsIm1lbWJlcnMiLCJkZXRhaWxzIiwibmFtZSIsImFkZHJlc3MiLCJwb3J0IiwiaWQiLCJjaGVjayIsInR0bCIsImRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlciIsInNlcnZpY2UiLCJyZWdpc3RlciIsInNldEludGVydmFsIiwicGFzcyIsIkVycm9yIiwib24iLCJkZXJlZ2lzdGVyIiwiZXhpdCJdLCJtYXBwaW5ncyI6ImFBQUEsSUFBTUEsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxJQUFiLENBQU4sSUFBNEIsSUFBekM7QUFDQSxJQUFNSSxVQUFVLEdBQUdGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxVQUFaLElBQTBCLFdBQTdDO0FBQ0EsSUFBTUMsU0FBUyxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCQyxFQUFoQixFQUFsQjtBQUNBO0FBQ0EsSUFBSUMsUUFBUSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQSxTQUFTRyxZQUFULENBQXNCQyxFQUF0QixFQUEwQjtBQUN0QixTQUFPLElBQUlGLFFBQUosQ0FBYSxVQUFTRyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUM1QyxRQUFJO0FBQ0YsYUFBT0YsRUFBRSxDQUFDLFVBQVNHLEdBQVQsRUFBY0MsSUFBZCxFQUFvQkMsR0FBcEIsRUFBeUI7QUFDakMsWUFBSUYsR0FBSixFQUFTO0FBQ1BBLFVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixHQUFVQSxHQUFWO0FBQ0EsaUJBQU9ILE1BQU0sQ0FBQ0MsR0FBRCxDQUFiO0FBQ0Q7QUFDRCxlQUFPRixPQUFPLENBQUMsQ0FBQ0csSUFBRCxFQUFPQyxHQUFQLENBQUQsQ0FBZDtBQUNELE9BTlEsQ0FBVDtBQU9ELEtBUkQsQ0FRRSxPQUFPRixHQUFQLEVBQVk7QUFDWixhQUFPRCxNQUFNLENBQUNDLEdBQUQsQ0FBYjtBQUNEO0FBQ0YsR0FaTSxDQUFQO0FBYUQ7QUFDSCxJQUFJRyxNQUFNLEdBQUdWLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0IsRUFBRVcsU0FBUyxFQUFFUixZQUFiLEVBQTBCUyxJQUFJLEVBQUMsZUFBL0IsRUFBbEIsQ0FBYjs7O0FBR0FGLE1BQU0sQ0FBQ0csR0FBUCxDQUFXQyxTQUFYLENBQXFCLFVBQVNQLEdBQVQsRUFBY1EsTUFBZCxFQUFzQjtBQUN2Q0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlWLEdBQVosRUFBaUJRLE1BQWpCO0FBQ0E7QUFDRCxDQUhIOzs7QUFNRUwsTUFBTSxDQUFDUSxLQUFQLENBQWFDLE9BQWIsQ0FBcUIsVUFBU1osR0FBVCxFQUFjUSxNQUFkLEVBQXNCO0FBQ3pDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCVixHQUF2QixFQUE0QlEsTUFBNUI7QUFDQSxNQUFJUixHQUFKLEVBQVMsTUFBTUEsR0FBTjtBQUNWLENBSEQ7QUFJRjs7QUFFQSxJQUFJYSxPQUFPLEdBQUc7QUFDWkMsRUFBQUEsSUFBSSxFQUFFLFlBRE0sRUFDUTtBQUNwQkMsRUFBQUEsT0FBTyxFQUFFeEIsVUFGRztBQUdaeUIsRUFBQUEsSUFBSSxFQUFFN0IsSUFITTtBQUlaOEIsRUFBQUEsRUFBRSxFQUFFekIsU0FKUTtBQUtaMEIsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLEdBQUcsRUFBRSxLQURBO0FBRUxDLElBQUFBLGlDQUFpQyxFQUFFLElBRjlCLEVBTEssRUFBZDs7O0FBVUFqQixNQUFNLENBQUNRLEtBQVAsQ0FBYVUsT0FBYixDQUFxQkMsUUFBckIsQ0FBOEJULE9BQTlCLEVBQXVDLFVBQUFiLEdBQUcsRUFBSTtBQUM1QztBQUNBUyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCVixHQUF6QjtBQUNELENBSEQ7O0FBS0F1QixXQUFXLENBQUMsWUFBTTtBQUNkcEIsRUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFPLEtBQWIsQ0FBbUJNLElBQW5CLENBQXdCLEVBQUNQLEVBQUUsb0JBQVl6QixTQUFaLENBQUgsRUFBeEIsRUFBcUQsVUFBQVEsR0FBRyxFQUFJO0FBQzFELFFBQUlBLEdBQUosRUFBUyxNQUFNLElBQUl5QixLQUFKLENBQVV6QixHQUFWLENBQU47QUFDVFMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksaUNBQVo7QUFDRCxHQUhEO0FBSUQsQ0FMUSxFQUtOLElBQUksSUFMRSxDQUFYOztBQU9FckIsT0FBTyxDQUFDcUMsRUFBUixDQUFXLFFBQVgsRUFBcUIsWUFBTTtBQUN6QmpCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDJCQUFaO0FBQ0EsTUFBSUcsT0FBTyxHQUFHLEVBQUNJLEVBQUUsRUFBRXpCLFNBQUwsRUFBZDs7QUFFQVcsRUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFVLE9BQWIsQ0FBcUJNLFVBQXJCLENBQWdDZCxPQUFoQyxFQUF5QyxVQUFDYixHQUFELEVBQVM7QUFDaERTLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFaLEVBQThCVixHQUE5QjtBQUNBWCxJQUFBQSxPQUFPLENBQUN1QyxJQUFSO0FBQ0QsR0FIRDtBQUlELENBUkQ7O0FBVUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQT1JUID0gTnVtYmVyKHByb2Nlc3MuZW52LlBPUlQpIHx8IDg4ODk7XHJcbmNvbnN0IElQX0FERFJFU1MgPSBwcm9jZXNzLmVudi5JUF9BRERSRVNTIHx8ICdsb2NhbGhvc3QnO1xyXG5jb25zdCBDT05TVUxfSUQgPSByZXF1aXJlKCd1dWlkJykudjQoKTtcclxuLy8gdmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKCk7XHJcbnZhciBCbHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XHJcblxyXG5mdW5jdGlvbiBmcm9tQ2FsbGJhY2soZm4pIHtcclxuICAgIHJldHVybiBuZXcgQmx1ZWJpcmQoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGZuKGZ1bmN0aW9uKGVyciwgZGF0YSwgcmVzKSB7XHJcbiAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGVyci5yZXMgPSByZXM7XHJcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiByZXNvbHZlKFtkYXRhLCByZXNdKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbnZhciBjb25zdWwgPSByZXF1aXJlKCdjb25zdWwnKSh7IHByb21pc2lmeTogZnJvbUNhbGxiYWNrLGhvc3Q6XCIxNzIuMTguNDAuMTY4XCIgfSk7XHJcblxyXG5cclxuY29uc3VsLmFjbC5ib290c3RyYXAoZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcclxuICAgIGNvbnNvbGUubG9nKGVyciwgcmVzdWx0KVxyXG4gICAgLy8gaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgY29uc3VsLmFnZW50Lm1lbWJlcnMoZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcclxuICAgIGNvbnNvbGUubG9nKCdtZW1lYnJzJywgZXJyLCByZXN1bHQpXHJcbiAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgfSk7XHJcbi8vIC0tLS0tIHNob3VsZCBiZSBwYXJ0IG9mIHNlYXJjaC9vcmRlciBzZXJ2aWNlc1xyXG4gXHJcbmxldCBkZXRhaWxzID0ge1xyXG4gIG5hbWU6ICdyZXN0YXVyYW50JywgLy8gc2VydmljZSBncm91cCBuYW1lIHNlYXJjaCBvciBvcmRlclxyXG4gIGFkZHJlc3M6IElQX0FERFJFU1MsXHJcbiAgcG9ydDogUE9SVCxcclxuICBpZDogQ09OU1VMX0lELFxyXG4gIGNoZWNrOiB7XHJcbiAgICB0dGw6ICcxMHMnLFxyXG4gICAgZGVyZWdpc3Rlcl9jcml0aWNhbF9zZXJ2aWNlX2FmdGVyOiAnMW0nXHJcbiAgfVxyXG59O1xyXG5jb25zdWwuYWdlbnQuc2VydmljZS5yZWdpc3RlcihkZXRhaWxzLCBlcnIgPT4ge1xyXG4gIC8vIHNjaGVkdWxlIGhlYXJ0YmVhdFxyXG4gIGNvbnNvbGUubG9nKFwicmVnaXN0ZXIgXCIsIGVycilcclxufSk7IFxyXG5cclxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3VsLmFnZW50LmNoZWNrLnBhc3Moe2lkOmBzZXJ2aWNlOiR7Q09OU1VMX0lEfWB9LCBlcnIgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcclxuICAgICAgY29uc29sZS5sb2coJ3RvbGQgQ29uc3VsIHRoYXQgd2UgYXJlIGhlYWx0aHknKTtcclxuICAgIH0pO1xyXG4gIH0sIDUgKiAxMDAwKTtcclxuXHJcbiAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1NJR0lOVC4gRGUtUmVnaXN0ZXJpbmcuLi4nKTtcclxuICAgIGxldCBkZXRhaWxzID0ge2lkOiBDT05TVUxfSUR9O1xyXG4gIFxyXG4gICAgY29uc3VsLmFnZW50LnNlcnZpY2UuZGVyZWdpc3RlcihkZXRhaWxzLCAoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdkZS1yZWdpc3RlcmVkLicsIGVycik7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tIl19