"use strict"; // var consul = require('consul')();
var Bluebird = require('bluebird');
var IP_ADDRESS = process.env.IP_ADDRESS || 'localhost';
var CONSUL_ID = require('uuid').v4();
var PORT = Number(process.env.PORT) || 8889;

function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback, host: "172.18.40.168" });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err;
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});



var known_search_instances = [];

var watcher = consul.watch({
  method: consul.health.service,
  options: {
    service: 'restaurant',
    passing: true } });



watcher.on('change', function (data) {
  known_search_instances = [];
  data.forEach(function (entry) {
    known_search_instances.push("http://".concat(entry.Service.Address, ":").concat(entry.Service.Port, "/"));
  });

  console.log("Available search services ", known_search_instances);
});


var known_order_instances = [];

var orderWatcher = consul.watch({
  method: consul.health.service,
  options: {
    service: 'order',
    passing: true } });



orderWatcher.on('change', function (data) {
  known_order_instances = [];
  data.forEach(function (entry) {
    known_order_instances.push("http://".concat(entry.Service.Address, ":").concat(entry.Service.Port, "/"));
  });

  console.log("Available known_order_instances services ", known_order_instances);
});

var details = {
  name: 'report', // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };


consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,