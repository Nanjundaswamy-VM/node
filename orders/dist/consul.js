"use strict";
// var consul = require('consul')();
var Bluebird = require('bluebird');

function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback, host: "172.18.40.168" });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err;
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});


var PORT = Number(process.env.PORT) || 8889;
var IP_ADDRESS = process.env.IP_ADDRESS || 'localhost';




// ----- should be part of search/order services

var CONSUL_ID = require('uuid').v4();
var details = {
  name: 'order', // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };


consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});

// -----------------
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdWwuanMiXSwibmFtZXMiOlsiQmx1ZWJpcmQiLCJyZXF1aXJlIiwiZnJvbUNhbGxiYWNrIiwiZm4iLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIiwiZGF0YSIsInJlcyIsImNvbnN1bCIsInByb21pc2lmeSIsImhvc3QiLCJhY2wiLCJib290c3RyYXAiLCJyZXN1bHQiLCJjb25zb2xlIiwibG9nIiwiYWdlbnQiLCJtZW1iZXJzIiwiUE9SVCIsIk51bWJlciIsInByb2Nlc3MiLCJlbnYiLCJJUF9BRERSRVNTIiwiQ09OU1VMX0lEIiwidjQiLCJkZXRhaWxzIiwibmFtZSIsImFkZHJlc3MiLCJwb3J0IiwiaWQiLCJjaGVjayIsInR0bCIsImRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlciIsInNlcnZpY2UiLCJyZWdpc3RlciIsInNldEludGVydmFsIiwicGFzcyIsIkVycm9yIiwib24iLCJkZXJlZ2lzdGVyIiwiZXhpdCJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0EsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQSxTQUFTQyxZQUFULENBQXNCQyxFQUF0QixFQUEwQjtBQUN0QixTQUFPLElBQUlILFFBQUosQ0FBYSxVQUFTSSxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUM1QyxRQUFJO0FBQ0YsYUFBT0YsRUFBRSxDQUFDLFVBQVNHLEdBQVQsRUFBY0MsSUFBZCxFQUFvQkMsR0FBcEIsRUFBeUI7QUFDakMsWUFBSUYsR0FBSixFQUFTO0FBQ1BBLFVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixHQUFVQSxHQUFWO0FBQ0EsaUJBQU9ILE1BQU0sQ0FBQ0MsR0FBRCxDQUFiO0FBQ0Q7QUFDRCxlQUFPRixPQUFPLENBQUMsQ0FBQ0csSUFBRCxFQUFPQyxHQUFQLENBQUQsQ0FBZDtBQUNELE9BTlEsQ0FBVDtBQU9ELEtBUkQsQ0FRRSxPQUFPRixHQUFQLEVBQVk7QUFDWixhQUFPRCxNQUFNLENBQUNDLEdBQUQsQ0FBYjtBQUNEO0FBQ0YsR0FaTSxDQUFQO0FBYUQ7QUFDSCxJQUFJRyxNQUFNLEdBQUdSLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0IsRUFBRVMsU0FBUyxFQUFFUixZQUFiLEVBQTBCUyxJQUFJLEVBQUMsZUFBL0IsRUFBbEIsQ0FBYjs7O0FBR0FGLE1BQU0sQ0FBQ0csR0FBUCxDQUFXQyxTQUFYLENBQXFCLFVBQVNQLEdBQVQsRUFBY1EsTUFBZCxFQUFzQjtBQUN2Q0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlWLEdBQVosRUFBaUJRLE1BQWpCO0FBQ0E7QUFDRCxDQUhIOzs7QUFNRUwsTUFBTSxDQUFDUSxLQUFQLENBQWFDLE9BQWIsQ0FBcUIsVUFBU1osR0FBVCxFQUFjUSxNQUFkLEVBQXNCO0FBQ3pDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCVixHQUF2QixFQUE0QlEsTUFBNUI7QUFDQSxNQUFJUixHQUFKLEVBQVMsTUFBTUEsR0FBTjtBQUNWLENBSEQ7OztBQU1BLElBQU1hLElBQUksR0FBR0MsTUFBTSxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsSUFBYixDQUFOLElBQTRCLElBQXpDO0FBQ0EsSUFBTUksVUFBVSxHQUFHRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBWixJQUEwQixXQUE3Qzs7Ozs7QUFLRjs7QUFFQSxJQUFNQyxTQUFTLEdBQUd2QixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCd0IsRUFBaEIsRUFBbEI7QUFDQSxJQUFJQyxPQUFPLEdBQUc7QUFDWkMsRUFBQUEsSUFBSSxFQUFFLE9BRE0sRUFDRztBQUNmQyxFQUFBQSxPQUFPLEVBQUVMLFVBRkc7QUFHWk0sRUFBQUEsSUFBSSxFQUFFVixJQUhNO0FBSVpXLEVBQUFBLEVBQUUsRUFBRU4sU0FKUTtBQUtaTyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsR0FBRyxFQUFFLEtBREE7QUFFTEMsSUFBQUEsaUNBQWlDLEVBQUUsSUFGOUIsRUFMSyxFQUFkOzs7QUFVQXhCLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhaUIsT0FBYixDQUFxQkMsUUFBckIsQ0FBOEJULE9BQTlCLEVBQXVDLFVBQUFwQixHQUFHLEVBQUk7QUFDNUM7QUFDQVMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWixFQUF5QlYsR0FBekI7QUFDRCxDQUhEOztBQUtBOEIsV0FBVyxDQUFDLFlBQU07QUFDZDNCLEVBQUFBLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhYyxLQUFiLENBQW1CTSxJQUFuQixDQUF3QixFQUFDUCxFQUFFLG9CQUFZTixTQUFaLENBQUgsRUFBeEIsRUFBcUQsVUFBQWxCLEdBQUcsRUFBSTtBQUMxRCxRQUFJQSxHQUFKLEVBQVMsTUFBTSxJQUFJZ0MsS0FBSixDQUFVaEMsR0FBVixDQUFOO0FBQ1RTLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlDQUFaO0FBQ0QsR0FIRDtBQUlELENBTFEsRUFLTixJQUFJLElBTEUsQ0FBWDs7QUFPRUssT0FBTyxDQUFDa0IsRUFBUixDQUFXLFFBQVgsRUFBcUIsWUFBTTtBQUN6QnhCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDJCQUFaO0FBQ0EsTUFBSVUsT0FBTyxHQUFHLEVBQUNJLEVBQUUsRUFBRU4sU0FBTCxFQUFkOztBQUVBZixFQUFBQSxNQUFNLENBQUNRLEtBQVAsQ0FBYWlCLE9BQWIsQ0FBcUJNLFVBQXJCLENBQWdDZCxPQUFoQyxFQUF5QyxVQUFDcEIsR0FBRCxFQUFTO0FBQ2hEUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QlYsR0FBOUI7QUFDQWUsSUFBQUEsT0FBTyxDQUFDb0IsSUFBUjtBQUNELEdBSEQ7QUFJRCxDQVJEOztBQVVBIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIHZhciBjb25zdWwgPSByZXF1aXJlKCdjb25zdWwnKSgpO1xyXG52YXIgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xyXG5cclxuZnVuY3Rpb24gZnJvbUNhbGxiYWNrKGZuKSB7XHJcbiAgICByZXR1cm4gbmV3IEJsdWViaXJkKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBmbihmdW5jdGlvbihlcnIsIGRhdGEsIHJlcykge1xyXG4gICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICBlcnIucmVzID0gcmVzO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbZGF0YSwgcmVzXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG52YXIgY29uc3VsID0gcmVxdWlyZSgnY29uc3VsJykoeyBwcm9taXNpZnk6IGZyb21DYWxsYmFjayxob3N0OlwiMTcyLjE4LjQwLjE2OFwiIH0pO1xyXG5cclxuXHJcbmNvbnN1bC5hY2wuYm9vdHN0cmFwKGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIsIHJlc3VsdClcclxuICAgIC8vIGlmIChlcnIpIHRocm93IGVycjtcclxuICB9KTtcclxuXHJcblxyXG4gIGNvbnN1bC5hZ2VudC5tZW1iZXJzKGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XHJcbiAgICBjb25zb2xlLmxvZygnbWVtZWJycycsIGVyciwgcmVzdWx0KVxyXG4gICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gIH0pO1xyXG5cclxuIFxyXG4gIGNvbnN0IFBPUlQgPSBOdW1iZXIocHJvY2Vzcy5lbnYuUE9SVCkgfHwgODg4OTtcclxuICBjb25zdCBJUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuSVBfQUREUkVTUyB8fCAnbG9jYWxob3N0JztcclxuICBcclxuICBcclxuICBcclxuXHJcbi8vIC0tLS0tIHNob3VsZCBiZSBwYXJ0IG9mIHNlYXJjaC9vcmRlciBzZXJ2aWNlc1xyXG5cclxuY29uc3QgQ09OU1VMX0lEID0gcmVxdWlyZSgndXVpZCcpLnY0KCk7XHJcbmxldCBkZXRhaWxzID0ge1xyXG4gIG5hbWU6ICdvcmRlcicsIC8vIHNlcnZpY2UgZ3JvdXAgbmFtZSBzZWFyY2ggb3Igb3JkZXJcclxuICBhZGRyZXNzOiBJUF9BRERSRVNTLFxyXG4gIHBvcnQ6IFBPUlQsXHJcbiAgaWQ6IENPTlNVTF9JRCxcclxuICBjaGVjazoge1xyXG4gICAgdHRsOiAnMTBzJyxcclxuICAgIGRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlcjogJzFtJ1xyXG4gIH1cclxufTtcclxuY29uc3VsLmFnZW50LnNlcnZpY2UucmVnaXN0ZXIoZGV0YWlscywgZXJyID0+IHtcclxuICAvLyBzY2hlZHVsZSBoZWFydGJlYXRcclxuICBjb25zb2xlLmxvZyhcInJlZ2lzdGVyIFwiLCBlcnIpXHJcbn0pOyBcclxuXHJcbnNldEludGVydmFsKCgpID0+IHtcclxuICAgIGNvbnN1bC5hZ2VudC5jaGVjay5wYXNzKHtpZDpgc2VydmljZToke0NPTlNVTF9JRH1gfSwgZXJyID0+IHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgbmV3IEVycm9yKGVycik7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd0b2xkIENvbnN1bCB0aGF0IHdlIGFyZSBoZWFsdGh5Jyk7XHJcbiAgICB9KTtcclxuICB9LCA1ICogMTAwMCk7XHJcblxyXG4gIHByb2Nlc3Mub24oJ1NJR0lOVCcsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdTSUdJTlQuIERlLVJlZ2lzdGVyaW5nLi4uJyk7XHJcbiAgICBsZXQgZGV0YWlscyA9IHtpZDogQ09OU1VMX0lEfTtcclxuICBcclxuICAgIGNvbnN1bC5hZ2VudC5zZXJ2aWNlLmRlcmVnaXN0ZXIoZGV0YWlscywgKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnZGUtcmVnaXN0ZXJlZC4nLCBlcnIpO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLSJdfQ==