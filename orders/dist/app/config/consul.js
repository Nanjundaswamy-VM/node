/**
 * @file
 * config file to handle the consul service.
 */
'use strict';

//var consul = require('consul')();
var Bluebird = require('bluebird');
var PORT = Number(process.env.PORT) || 8889;
var IP_ADDRESS = process.env.IP_ADDRESS || 'localhost';
var CONSUL_ID = require('uuid').v4();
var CN_HOST = "172.18.36.244";

/**
                                    * @name fromCallback
                                    * @desc to update the order based on id.
                                    * @input DB element,orderid and fields
                                    * @output order obj / err obj
                                    */
function fromCallback(fn) {
  return new Bluebird(function (resolve, reject) {
    try {
      return fn(function (err, data, res) {
        if (err) {
          err.res = res;
          return reject(err);
        }
        return resolve([data, res]);
      });
    } catch (err) {
      return reject(err);
    }
  });
}
var consul = require('consul')({ promisify: fromCallback, host: CN_HOST });


consul.acl.bootstrap(function (err, result) {
  console.log(err, result);
  // if (err) throw err;
});


consul.agent.members(function (err, result) {
  console.log('memebrs', err, result);
  if (err) throw err;
});


// ----- should be part of search/order services

var details = {
  name: 'order', // service group name search or order
  address: IP_ADDRESS,
  port: PORT,
  id: CONSUL_ID,
  check: {
    ttl: '10s',
    deregister_critical_service_after: '1m' } };



consul.agent.service.register(details, function (err) {
  // schedule heartbeat
  console.log("register ", err);
});

setInterval(function () {
  consul.agent.check.pass({ id: "service:".concat(CONSUL_ID) }, function (err) {
    if (err) throw new Error(err);
    console.log('told Consul that we are healthy');
  });
}, 5 * 1000);

process.on('SIGINT', function () {
  console.log('SIGINT. De-Registering...');
  var details = { id: CONSUL_ID };

  consul.agent.service.deregister(details, function (err) {
    console.log('de-registered.', err);
    process.exit();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvY29uZmlnL2NvbnN1bC5qcyJdLCJuYW1lcyI6WyJCbHVlYmlyZCIsInJlcXVpcmUiLCJQT1JUIiwiTnVtYmVyIiwicHJvY2VzcyIsImVudiIsIklQX0FERFJFU1MiLCJDT05TVUxfSUQiLCJ2NCIsIkNOX0hPU1QiLCJmcm9tQ2FsbGJhY2siLCJmbiIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwicmVzIiwiY29uc3VsIiwicHJvbWlzaWZ5IiwiaG9zdCIsImFjbCIsImJvb3RzdHJhcCIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJhZ2VudCIsIm1lbWJlcnMiLCJkZXRhaWxzIiwibmFtZSIsImFkZHJlc3MiLCJwb3J0IiwiaWQiLCJjaGVjayIsInR0bCIsImRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlciIsInNlcnZpY2UiLCJyZWdpc3RlciIsInNldEludGVydmFsIiwicGFzcyIsIkVycm9yIiwib24iLCJkZXJlZ2lzdGVyIiwiZXhpdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTs7QUFFQTtBQUNBLElBQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7QUFDQSxJQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlILElBQWIsQ0FBTixJQUE0QixJQUF6QztBQUNBLElBQU1JLFVBQVUsR0FBR0YsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQVosSUFBMEIsV0FBN0M7QUFDQSxJQUFNQyxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JPLEVBQWhCLEVBQWxCO0FBQ0EsSUFBTUMsT0FBTyxHQUFHLGVBQWhCOztBQUVBOzs7Ozs7QUFNQSxTQUFTQyxZQUFULENBQXNCQyxFQUF0QixFQUEwQjtBQUN4QixTQUFPLElBQUlYLFFBQUosQ0FBYSxVQUFVWSxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUM3QyxRQUFJO0FBQ0YsYUFBT0YsRUFBRSxDQUFDLFVBQVVHLEdBQVYsRUFBZUMsSUFBZixFQUFxQkMsR0FBckIsRUFBMEI7QUFDbEMsWUFBSUYsR0FBSixFQUFTO0FBQ1BBLFVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixHQUFVQSxHQUFWO0FBQ0EsaUJBQU9ILE1BQU0sQ0FBQ0MsR0FBRCxDQUFiO0FBQ0Q7QUFDRCxlQUFPRixPQUFPLENBQUMsQ0FBQ0csSUFBRCxFQUFPQyxHQUFQLENBQUQsQ0FBZDtBQUNELE9BTlEsQ0FBVDtBQU9ELEtBUkQsQ0FRRSxPQUFPRixHQUFQLEVBQVk7QUFDWixhQUFPRCxNQUFNLENBQUNDLEdBQUQsQ0FBYjtBQUNEO0FBQ0YsR0FaTSxDQUFQO0FBYUQ7QUFDRCxJQUFJRyxNQUFNLEdBQUdoQixPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCLEVBQUVpQixTQUFTLEVBQUVSLFlBQWIsRUFBMkJTLElBQUksRUFBRVYsT0FBakMsRUFBbEIsQ0FBYjs7O0FBR0FRLE1BQU0sQ0FBQ0csR0FBUCxDQUFXQyxTQUFYLENBQXFCLFVBQVVQLEdBQVYsRUFBZVEsTUFBZixFQUF1QjtBQUMxQ0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlWLEdBQVosRUFBaUJRLE1BQWpCO0FBQ0E7QUFDRCxDQUhEOzs7QUFNQUwsTUFBTSxDQUFDUSxLQUFQLENBQWFDLE9BQWIsQ0FBcUIsVUFBVVosR0FBVixFQUFlUSxNQUFmLEVBQXVCO0FBQzFDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCVixHQUF2QixFQUE0QlEsTUFBNUI7QUFDQSxNQUFJUixHQUFKLEVBQVMsTUFBTUEsR0FBTjtBQUNWLENBSEQ7OztBQU1BOztBQUVBLElBQUlhLE9BQU8sR0FBRztBQUNaQyxFQUFBQSxJQUFJLEVBQUUsT0FETSxFQUNHO0FBQ2ZDLEVBQUFBLE9BQU8sRUFBRXZCLFVBRkc7QUFHWndCLEVBQUFBLElBQUksRUFBRTVCLElBSE07QUFJWjZCLEVBQUFBLEVBQUUsRUFBRXhCLFNBSlE7QUFLWnlCLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxHQUFHLEVBQUUsS0FEQTtBQUVMQyxJQUFBQSxpQ0FBaUMsRUFBRSxJQUY5QixFQUxLLEVBQWQ7Ozs7QUFXQWpCLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhVSxPQUFiLENBQXFCQyxRQUFyQixDQUE4QlQsT0FBOUIsRUFBdUMsVUFBQWIsR0FBRyxFQUFJO0FBQzVDO0FBQ0FTLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFdBQVosRUFBeUJWLEdBQXpCO0FBQ0QsQ0FIRDs7QUFLQXVCLFdBQVcsQ0FBQyxZQUFNO0FBQ2hCcEIsRUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFPLEtBQWIsQ0FBbUJNLElBQW5CLENBQXdCLEVBQUVQLEVBQUUsb0JBQWF4QixTQUFiLENBQUosRUFBeEIsRUFBd0QsVUFBQU8sR0FBRyxFQUFJO0FBQzdELFFBQUlBLEdBQUosRUFBUyxNQUFNLElBQUl5QixLQUFKLENBQVV6QixHQUFWLENBQU47QUFDVFMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksaUNBQVo7QUFDRCxHQUhEO0FBSUQsQ0FMVSxFQUtSLElBQUksSUFMSSxDQUFYOztBQU9BcEIsT0FBTyxDQUFDb0MsRUFBUixDQUFXLFFBQVgsRUFBcUIsWUFBTTtBQUN6QmpCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDJCQUFaO0FBQ0EsTUFBSUcsT0FBTyxHQUFHLEVBQUVJLEVBQUUsRUFBRXhCLFNBQU4sRUFBZDs7QUFFQVUsRUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFVLE9BQWIsQ0FBcUJNLFVBQXJCLENBQWdDZCxPQUFoQyxFQUF5QyxVQUFDYixHQUFELEVBQVM7QUFDaERTLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdCQUFaLEVBQThCVixHQUE5QjtBQUNBVixJQUFBQSxPQUFPLENBQUNzQyxJQUFSO0FBQ0QsR0FIRDtBQUlELENBUkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGZpbGVcclxuICogY29uZmlnIGZpbGUgdG8gaGFuZGxlIHRoZSBjb25zdWwgc2VydmljZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vdmFyIGNvbnN1bCA9IHJlcXVpcmUoJ2NvbnN1bCcpKCk7XHJcbmNvbnN0IEJsdWViaXJkID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcclxuY29uc3QgUE9SVCA9IE51bWJlcihwcm9jZXNzLmVudi5QT1JUKSB8fCA4ODg5O1xyXG5jb25zdCBJUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuSVBfQUREUkVTUyB8fCAnbG9jYWxob3N0JztcclxuY29uc3QgQ09OU1VMX0lEID0gcmVxdWlyZSgndXVpZCcpLnY0KCk7XHJcbmNvbnN0IENOX0hPU1QgPSBcIjE3Mi4xOC4zNi4yNDRcIjtcclxuXHJcbi8qKlxyXG4gICAgICogQG5hbWUgZnJvbUNhbGxiYWNrXHJcbiAgICAgKiBAZGVzYyB0byB1cGRhdGUgdGhlIG9yZGVyIGJhc2VkIG9uIGlkLlxyXG4gICAgICogQGlucHV0IERCIGVsZW1lbnQsb3JkZXJpZCBhbmQgZmllbGRzXHJcbiAgICAgKiBAb3V0cHV0IG9yZGVyIG9iaiAvIGVyciBvYmpcclxuICAgICAqL1xyXG5mdW5jdGlvbiBmcm9tQ2FsbGJhY2soZm4pIHtcclxuICByZXR1cm4gbmV3IEJsdWViaXJkKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBmbihmdW5jdGlvbiAoZXJyLCBkYXRhLCByZXMpIHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICBlcnIucmVzID0gcmVzO1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzb2x2ZShbZGF0YSwgcmVzXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG52YXIgY29uc3VsID0gcmVxdWlyZSgnY29uc3VsJykoeyBwcm9taXNpZnk6IGZyb21DYWxsYmFjaywgaG9zdDogQ05fSE9TVCB9KTtcclxuXHJcblxyXG5jb25zdWwuYWNsLmJvb3RzdHJhcChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICBjb25zb2xlLmxvZyhlcnIsIHJlc3VsdClcclxuICAvLyBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN1bC5hZ2VudC5tZW1iZXJzKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xyXG4gIGNvbnNvbGUubG9nKCdtZW1lYnJzJywgZXJyLCByZXN1bHQpXHJcbiAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG59KTtcclxuXHJcblxyXG4vLyAtLS0tLSBzaG91bGQgYmUgcGFydCBvZiBzZWFyY2gvb3JkZXIgc2VydmljZXNcclxuXHJcbmxldCBkZXRhaWxzID0ge1xyXG4gIG5hbWU6ICdvcmRlcicsIC8vIHNlcnZpY2UgZ3JvdXAgbmFtZSBzZWFyY2ggb3Igb3JkZXJcclxuICBhZGRyZXNzOiBJUF9BRERSRVNTLFxyXG4gIHBvcnQ6IFBPUlQsXHJcbiAgaWQ6IENPTlNVTF9JRCxcclxuICBjaGVjazoge1xyXG4gICAgdHRsOiAnMTBzJyxcclxuICAgIGRlcmVnaXN0ZXJfY3JpdGljYWxfc2VydmljZV9hZnRlcjogJzFtJ1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN1bC5hZ2VudC5zZXJ2aWNlLnJlZ2lzdGVyKGRldGFpbHMsIGVyciA9PiB7XHJcbiAgLy8gc2NoZWR1bGUgaGVhcnRiZWF0XHJcbiAgY29uc29sZS5sb2coXCJyZWdpc3RlciBcIiwgZXJyKVxyXG59KTtcclxuXHJcbnNldEludGVydmFsKCgpID0+IHtcclxuICBjb25zdWwuYWdlbnQuY2hlY2sucGFzcyh7IGlkOiBgc2VydmljZToke0NPTlNVTF9JRH1gIH0sIGVyciA9PiB7XHJcbiAgICBpZiAoZXJyKSB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcclxuICAgIGNvbnNvbGUubG9nKCd0b2xkIENvbnN1bCB0aGF0IHdlIGFyZSBoZWFsdGh5Jyk7XHJcbiAgfSk7XHJcbn0sIDUgKiAxMDAwKTtcclxuXHJcbnByb2Nlc3Mub24oJ1NJR0lOVCcsICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnU0lHSU5ULiBEZS1SZWdpc3RlcmluZy4uLicpO1xyXG4gIGxldCBkZXRhaWxzID0geyBpZDogQ09OU1VMX0lEIH07XHJcblxyXG4gIGNvbnN1bC5hZ2VudC5zZXJ2aWNlLmRlcmVnaXN0ZXIoZGV0YWlscywgKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2RlLXJlZ2lzdGVyZWQuJywgZXJyKTtcclxuICAgIHByb2Nlc3MuZXhpdCgpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19